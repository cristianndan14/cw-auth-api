# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.api_data_goals import ApiDataGoals  # noqa: F401,E501
from swagger_server import util


class ApiData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, codVendor: str=None, identificationNumber: str=None, city: str=None, status: str=None, email: str=None, cellphone: str=None, goals: ApiDataGoals=None, salesChannel: str=None, leader: int=None):  # noqa: E501
        """ApiData - a model defined in Swagger

        :param codVendor: The codVendor of this ApiData.  # noqa: E501
        :type codVendor: str
        :param identificationNumber: The identificationNumber of this ApiData.  # noqa: E501
        :type identificationNumber: str
        :param city: The city of this ApiData.  # noqa: E501
        :type city: str
        :param status: The status of this ApiData.  # noqa: E501
        :type status: str
        :param email: The email of this ApiData.  # noqa: E501
        :type email: str
        :param cellphone: The cellphone of this ApiData.  # noqa: E501
        :type cellphone: str
        :param goals: The goals of this ApiData.  # noqa: E501
        :type goals: ApiDataGoals
        :param salesChannel: The salesChannel of this ApiData.  # noqa: E501
        :type salesChannel: str
        :param leader: The leader of this ApiData.  # noqa: E501
        :type leader: int
        """
        self.swagger_types = {
            'codVendor': str,
            'identificationNumber': str,
            'city': str,
            'status': str,
            'email': str,
            'cellphone': str,
            'goals': ApiDataGoals,
            'salesChannel': str,
            'leader': int
        }

        self.attribute_map = {
            'codVendor': 'codVendor',
            'identificationNumber': 'identificationNumber',
            'city': 'city',
            'status': 'status',
            'email': 'email',
            'cellphone': 'cellphone',
            'goals': 'goals',
            'salesChannel': 'salesChannel',
            'leader': 'leader'
        }
        self._cod_vendor = codVendor
        self._identification_number = identificationNumber
        self._city = city
        self._status = status
        self._email = email
        self._cellphone = cellphone
        self._goals = goals
        self._sales_channel = salesChannel
        self._leader = leader

    @classmethod
    def from_dict(cls, dikt) -> 'ApiData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ApiData of this ApiData.  # noqa: E501
        :rtype: ApiData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def codVendor(self) -> str:
        """Gets the codVendor of this ApiData.


        :return: The codVendor of this ApiData.
        :rtype: str
        """
        return self._cod_vendor

    @codVendor.setter
    def codVendor(self, codVendor: str):
        """Sets the codVendor of this ApiData.


        :param codVendor: The codVendor of this ApiData.
        :type codVendor: str
        """

        self._cod_vendor = codVendor

    @property
    def identificationNumber(self) -> str:
        """Gets the identificationNumber of this ApiData.


        :return: The identificationNumber of this ApiData.
        :rtype: str
        """
        return self._identification_number

    @identificationNumber.setter
    def identificationNumber(self, identificationNumber: str):
        """Sets the identificationNumber of this ApiData.


        :param identificationNumber: The identificationNumber of this ApiData.
        :type identificationNumber: str
        """

        self._identification_number = identificationNumber

    @property
    def city(self) -> str:
        """Gets the city of this ApiData.


        :return: The city of this ApiData.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this ApiData.


        :param city: The city of this ApiData.
        :type city: str
        """

        self._city = city

    @property
    def status(self) -> str:
        """Gets the status of this ApiData.


        :return: The status of this ApiData.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this ApiData.


        :param status: The status of this ApiData.
        :type status: str
        """

        self._status = status

    @property
    def email(self) -> str:
        """Gets the email of this ApiData.


        :return: The email of this ApiData.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this ApiData.


        :param email: The email of this ApiData.
        :type email: str
        """

        self._email = email

    @property
    def cellphone(self) -> str:
        """Gets the cellphone of this ApiData.


        :return: The cellphone of this ApiData.
        :rtype: str
        """
        return self._cellphone

    @cellphone.setter
    def cellphone(self, cellphone: str):
        """Sets the cellphone of this ApiData.


        :param cellphone: The cellphone of this ApiData.
        :type cellphone: str
        """

        self._cellphone = cellphone

    @property
    def goals(self) -> ApiDataGoals:
        """Gets the goals of this ApiData.


        :return: The goals of this ApiData.
        :rtype: ApiDataGoals
        """
        return self._goals

    @goals.setter
    def goals(self, goals: ApiDataGoals):
        """Sets the goals of this ApiData.


        :param goals: The goals of this ApiData.
        :type goals: ApiDataGoals
        """

        self._goals = goals

    @property
    def salesChannel(self) -> str:
        """Gets the salesChannel of this ApiData.


        :return: The salesChannel of this ApiData.
        :rtype: str
        """
        return self._sales_channel

    @salesChannel.setter
    def salesChannel(self, salesChannel: str):
        """Sets the salesChannel of this ApiData.


        :param salesChannel: The salesChannel of this ApiData.
        :type salesChannel: str
        """

        self._sales_channel = salesChannel

    @property
    def leader(self) -> int:
        """Gets the leader of this ApiData.


        :return: The leader of this ApiData.
        :rtype: int
        """
        return self._leader

    @leader.setter
    def leader(self, leader: int):
        """Sets the leader of this ApiData.


        :param leader: The leader of this ApiData.
        :type leader: int
        """

        self._leader = leader

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.goals_data import GoalsData  # noqa: F401,E501
from swagger_server import util


class ApiData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, cod_vendor: str=None, identification_number: str=None, city: str=None, status: str=None, email: str=None, cellphone: str=None, goals: GoalsData=None, sales_channel: str=None, leader: int=None):  # noqa: E501
        """ApiData - a model defined in Swagger

        :param cod_vendor: The cod_vendor of this ApiData.  # noqa: E501
        :type cod_vendor: str
        :param identification_number: The identification_number of this ApiData.  # noqa: E501
        :type identification_number: str
        :param city: The city of this ApiData.  # noqa: E501
        :type city: str
        :param status: The status of this ApiData.  # noqa: E501
        :type status: str
        :param email: The email of this ApiData.  # noqa: E501
        :type email: str
        :param cellphone: The cellphone of this ApiData.  # noqa: E501
        :type cellphone: str
        :param goals: The goals of this ApiData.  # noqa: E501
        :type goals: GoalsData
        :param sales_channel: The sales_channel of this ApiData.  # noqa: E501
        :type sales_channel: str
        :param leader: The leader of this ApiData.  # noqa: E501
        :type leader: int
        """
        self.swagger_types = {
            'cod_vendor': str,
            'identification_number': str,
            'city': str,
            'status': str,
            'email': str,
            'cellphone': str,
            'goals': GoalsData,
            'sales_channel': str,
            'leader': int
        }

        self.attribute_map = {
            'cod_vendor': 'codVendor',
            'identification_number': 'identificationNumber',
            'city': 'city',
            'status': 'status',
            'email': 'email',
            'cellphone': 'cellphone',
            'goals': 'goals',
            'sales_channel': 'salesChannel',
            'leader': 'leader'
        }
        self._cod_vendor = cod_vendor
        self._identification_number = identification_number
        self._city = city
        self._status = status
        self._email = email
        self._cellphone = cellphone
        self._goals = goals
        self._sales_channel = sales_channel
        self._leader = leader

    @classmethod
    def from_dict(cls, dikt) -> 'ApiData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ApiData of this ApiData.  # noqa: E501
        :rtype: ApiData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cod_vendor(self) -> str:
        """Gets the cod_vendor of this ApiData.


        :return: The cod_vendor of this ApiData.
        :rtype: str
        """
        return self._cod_vendor

    @cod_vendor.setter
    def cod_vendor(self, cod_vendor: str):
        """Sets the cod_vendor of this ApiData.


        :param cod_vendor: The cod_vendor of this ApiData.
        :type cod_vendor: str
        """

        self._cod_vendor = cod_vendor

    @property
    def identification_number(self) -> str:
        """Gets the identification_number of this ApiData.


        :return: The identification_number of this ApiData.
        :rtype: str
        """
        return self._identification_number

    @identification_number.setter
    def identification_number(self, identification_number: str):
        """Sets the identification_number of this ApiData.


        :param identification_number: The identification_number of this ApiData.
        :type identification_number: str
        """

        self._identification_number = identification_number

    @property
    def city(self) -> str:
        """Gets the city of this ApiData.


        :return: The city of this ApiData.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this ApiData.


        :param city: The city of this ApiData.
        :type city: str
        """

        self._city = city

    @property
    def status(self) -> str:
        """Gets the status of this ApiData.


        :return: The status of this ApiData.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this ApiData.


        :param status: The status of this ApiData.
        :type status: str
        """

        self._status = status

    @property
    def email(self) -> str:
        """Gets the email of this ApiData.


        :return: The email of this ApiData.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this ApiData.


        :param email: The email of this ApiData.
        :type email: str
        """

        self._email = email

    @property
    def cellphone(self) -> str:
        """Gets the cellphone of this ApiData.


        :return: The cellphone of this ApiData.
        :rtype: str
        """
        return self._cellphone

    @cellphone.setter
    def cellphone(self, cellphone: str):
        """Sets the cellphone of this ApiData.


        :param cellphone: The cellphone of this ApiData.
        :type cellphone: str
        """

        self._cellphone = cellphone

    @property
    def goals(self) -> GoalsData:
        """Gets the goals of this ApiData.


        :return: The goals of this ApiData.
        :rtype: GoalsData
        """
        return self._goals

    @goals.setter
    def goals(self, goals: GoalsData):
        """Sets the goals of this ApiData.


        :param goals: The goals of this ApiData.
        :type goals: GoalsData
        """

        self._goals = goals

    @property
    def sales_channel(self) -> str:
        """Gets the sales_channel of this ApiData.


        :return: The sales_channel of this ApiData.
        :rtype: str
        """
        return self._sales_channel

    @sales_channel.setter
    def sales_channel(self, sales_channel: str):
        """Sets the sales_channel of this ApiData.


        :param sales_channel: The sales_channel of this ApiData.
        :type sales_channel: str
        """

        self._sales_channel = sales_channel

    @property
    def leader(self) -> int:
        """Gets the leader of this ApiData.


        :return: The leader of this ApiData.
        :rtype: int
        """
        return self._leader

    @leader.setter
    def leader(self, leader: int):
        """Sets the leader of this ApiData.


        :param leader: The leader of this ApiData.
        :type leader: int
        """

        self._leader = leader

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ApiDataGoals(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, internet_volumen: int=None, internet_dolar: float=None, television_volumen: int=None, television_dolar: float=None, telefonia_volumen: int=None, telefonia_dolar: float=None):  # noqa: E501
        """ApiDataGoals - a model defined in Swagger

        :param internet_volumen: The internet_volumen of this ApiDataGoals.  # noqa: E501
        :type internet_volumen: int
        :param internet_dolar: The internet_dolar of this ApiDataGoals.  # noqa: E501
        :type internet_dolar: float
        :param television_volumen: The television_volumen of this ApiDataGoals.  # noqa: E501
        :type television_volumen: int
        :param television_dolar: The television_dolar of this ApiDataGoals.  # noqa: E501
        :type television_dolar: float
        :param telefonia_volumen: The telefonia_volumen of this ApiDataGoals.  # noqa: E501
        :type telefonia_volumen: int
        :param telefonia_dolar: The telefonia_dolar of this ApiDataGoals.  # noqa: E501
        :type telefonia_dolar: float
        """
        self.swagger_types = {
            'internet_volumen': int,
            'internet_dolar': float,
            'television_volumen': int,
            'television_dolar': float,
            'telefonia_volumen': int,
            'telefonia_dolar': float
        }

        self.attribute_map = {
            'internet_volumen': 'Internet_volumen',
            'internet_dolar': 'Internet_dolar',
            'television_volumen': 'Television_volumen',
            'television_dolar': 'Television_dolar',
            'telefonia_volumen': 'Telefonia_volumen',
            'telefonia_dolar': 'Telefonia_dolar'
        }
        self._internet_volumen = internet_volumen
        self._internet_dolar = internet_dolar
        self._television_volumen = television_volumen
        self._television_dolar = television_dolar
        self._telefonia_volumen = telefonia_volumen
        self._telefonia_dolar = telefonia_dolar

    @classmethod
    def from_dict(cls, dikt) -> 'ApiDataGoals':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ApiData_goals of this ApiDataGoals.  # noqa: E501
        :rtype: ApiDataGoals
        """
        return util.deserialize_model(dikt, cls)

    @property
    def internet_volumen(self) -> int:
        """Gets the internet_volumen of this ApiDataGoals.


        :return: The internet_volumen of this ApiDataGoals.
        :rtype: int
        """
        return self._internet_volumen

    @internet_volumen.setter
    def internet_volumen(self, internet_volumen: int):
        """Sets the internet_volumen of this ApiDataGoals.


        :param internet_volumen: The internet_volumen of this ApiDataGoals.
        :type internet_volumen: int
        """

        self._internet_volumen = internet_volumen

    @property
    def internet_dolar(self) -> float:
        """Gets the internet_dolar of this ApiDataGoals.


        :return: The internet_dolar of this ApiDataGoals.
        :rtype: float
        """
        return self._internet_dolar

    @internet_dolar.setter
    def internet_dolar(self, internet_dolar: float):
        """Sets the internet_dolar of this ApiDataGoals.


        :param internet_dolar: The internet_dolar of this ApiDataGoals.
        :type internet_dolar: float
        """

        self._internet_dolar = internet_dolar

    @property
    def television_volumen(self) -> int:
        """Gets the television_volumen of this ApiDataGoals.


        :return: The television_volumen of this ApiDataGoals.
        :rtype: int
        """
        return self._television_volumen

    @television_volumen.setter
    def television_volumen(self, television_volumen: int):
        """Sets the television_volumen of this ApiDataGoals.


        :param television_volumen: The television_volumen of this ApiDataGoals.
        :type television_volumen: int
        """

        self._television_volumen = television_volumen

    @property
    def television_dolar(self) -> float:
        """Gets the television_dolar of this ApiDataGoals.


        :return: The television_dolar of this ApiDataGoals.
        :rtype: float
        """
        return self._television_dolar

    @television_dolar.setter
    def television_dolar(self, television_dolar: float):
        """Sets the television_dolar of this ApiDataGoals.


        :param television_dolar: The television_dolar of this ApiDataGoals.
        :type television_dolar: float
        """

        self._television_dolar = television_dolar

    @property
    def telefonia_volumen(self) -> int:
        """Gets the telefonia_volumen of this ApiDataGoals.


        :return: The telefonia_volumen of this ApiDataGoals.
        :rtype: int
        """
        return self._telefonia_volumen

    @telefonia_volumen.setter
    def telefonia_volumen(self, telefonia_volumen: int):
        """Sets the telefonia_volumen of this ApiDataGoals.


        :param telefonia_volumen: The telefonia_volumen of this ApiDataGoals.
        :type telefonia_volumen: int
        """

        self._telefonia_volumen = telefonia_volumen

    @property
    def telefonia_dolar(self) -> float:
        """Gets the telefonia_dolar of this ApiDataGoals.


        :return: The telefonia_dolar of this ApiDataGoals.
        :rtype: float
        """
        return self._telefonia_dolar

    @telefonia_dolar.setter
    def telefonia_dolar(self, telefonia_dolar: float):
        """Sets the telefonia_dolar of this ApiDataGoals.


        :param telefonia_dolar: The telefonia_dolar of this ApiDataGoals.
        :type telefonia_dolar: float
        """

        self._telefonia_dolar = telefonia_dolar

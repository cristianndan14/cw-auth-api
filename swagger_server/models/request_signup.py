# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.api_data import ApiData  # noqa: F401,E501
from swagger_server.models.signup_data import SignupData  # noqa: F401,E501
from swagger_server import util


class RequestSignup(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, channel: str=None, external_transaction_id: str=None, api_data: ApiData=None, data: SignupData=None):  # noqa: E501
        """RequestSignup - a model defined in Swagger

        :param channel: The channel of this RequestSignup.  # noqa: E501
        :type channel: str
        :param external_transaction_id: The external_transaction_id of this RequestSignup.  # noqa: E501
        :type external_transaction_id: str
        :param api_data: The api_data of this RequestSignup.  # noqa: E501
        :type api_data: ApiData
        :param data: The data of this RequestSignup.  # noqa: E501
        :type data: SignupData
        """
        self.swagger_types = {
            'channel': str,
            'external_transaction_id': str,
            'api_data': ApiData,
            'data': SignupData
        }

        self.attribute_map = {
            'channel': 'channel',
            'external_transaction_id': 'externalTransactionId',
            'api_data': 'api_data',
            'data': 'data'
        }
        self._channel = channel
        self._external_transaction_id = external_transaction_id
        self._api_data = api_data
        self._data = data

    @classmethod
    def from_dict(cls, dikt) -> 'RequestSignup':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RequestSignup of this RequestSignup.  # noqa: E501
        :rtype: RequestSignup
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self) -> str:
        """Gets the channel of this RequestSignup.


        :return: The channel of this RequestSignup.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel: str):
        """Sets the channel of this RequestSignup.


        :param channel: The channel of this RequestSignup.
        :type channel: str
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")  # noqa: E501

        self._channel = channel

    @property
    def external_transaction_id(self) -> str:
        """Gets the external_transaction_id of this RequestSignup.


        :return: The external_transaction_id of this RequestSignup.
        :rtype: str
        """
        return self._external_transaction_id

    @external_transaction_id.setter
    def external_transaction_id(self, external_transaction_id: str):
        """Sets the external_transaction_id of this RequestSignup.


        :param external_transaction_id: The external_transaction_id of this RequestSignup.
        :type external_transaction_id: str
        """
        if external_transaction_id is None:
            raise ValueError("Invalid value for `external_transaction_id`, must not be `None`")  # noqa: E501

        self._external_transaction_id = external_transaction_id

    @property
    def api_data(self) -> ApiData:
        """Gets the api_data of this RequestSignup.


        :return: The api_data of this RequestSignup.
        :rtype: ApiData
        """
        return self._api_data

    @api_data.setter
    def api_data(self, api_data: ApiData):
        """Sets the api_data of this RequestSignup.


        :param api_data: The api_data of this RequestSignup.
        :type api_data: ApiData
        """

        self._api_data = api_data

    @property
    def data(self) -> SignupData:
        """Gets the data of this RequestSignup.


        :return: The data of this RequestSignup.
        :rtype: SignupData
        """
        return self._data

    @data.setter
    def data(self, data: SignupData):
        """Sets the data of this RequestSignup.


        :param data: The data of this RequestSignup.
        :type data: SignupData
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data
